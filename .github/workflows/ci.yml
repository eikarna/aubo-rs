name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  ANDROID_API_LEVEL: 29
  NDK_VERSION: r27d

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

  build-android:
    name: Build for Android
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        build-type: [debug, release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android
    
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: ${{ env.NDK_VERSION }}
    
    - name: Install CMake
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake
    
    - name: Install cargo-ndk
      run: cargo install cargo-ndk
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-android-${{ matrix.build-type }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Set up build environment
      run: |
        echo "CC_aarch64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${{ env.ANDROID_API_LEVEL }}-clang" >> $GITHUB_ENV
        echo "AR_aarch64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
        echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${{ env.ANDROID_API_LEVEL }}-clang" >> $GITHUB_ENV
        echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
        echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
        echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
    
    - name: Test network features on host
      run: cargo check --features "network"
    
    - name: Clean build artifacts
      run: |
        # Clean any existing build artifacts to ensure fresh build
        rm -rf target/aarch64-linux-android/
        cargo clean --target aarch64-linux-android

    - name: Build Rust library for Android
      run: |
        if [ "${{ matrix.build-type }}" = "release" ]; then
          cargo ndk -t arm64-v8a build --release --no-default-features --features "filter-engine,performance-monitoring"
        else
          cargo ndk -t arm64-v8a build --no-default-features --features "filter-engine,performance-monitoring"
        fi
    
    - name: Build C++ ZygiskNext module
      run: |
        BUILD_TYPE="Release"
        if [ "${{ matrix.build-type }}" = "debug" ]; then
          BUILD_TYPE="Debug"
        fi
        
        # Create clean build directory
        BUILD_DIR="target/aarch64-linux-android/cpp_build"
        rm -rf "$BUILD_DIR"
        mkdir -p "$BUILD_DIR"
        cd "$BUILD_DIR"
        
        # Configure with CMake using Unix Makefiles (more reliable in CI)
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
              -DANDROID_ABI=arm64-v8a \
              -DANDROID_PLATFORM=android-${{ env.ANDROID_API_LEVEL }} \
              -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
              ../../../src/cpp
        
        # Build with make
        make -j$(nproc)
        
        # Copy built module from build directory to expected location
        cp libaubo_module.so ../aubo_module.so
        
        cd ../../..
    
    - name: Validate built modules
      run: |
        echo "=== Validating Rust library ==="
        RUST_LIB="target/aarch64-linux-android/${{ matrix.build-type }}/libaubo_rs.so"
        if [ -f "$RUST_LIB" ]; then
          echo "✓ Rust library found: $RUST_LIB"
          echo "Size: $(stat -c%s "$RUST_LIB") bytes"
          
          # Show all available symbols for debugging
          echo "Available symbols in Rust library:"
          $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm "$RUST_LIB" 2>/dev/null | head -20 || echo "No symbols found or nm failed"
          
          # Check for required C exports
          if $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm "$RUST_LIB" | grep -q "aubo_initialize"; then
            echo "✓ aubo_initialize symbol found"
          else
            echo "✗ aubo_initialize symbol missing"
            echo "Available symbols containing 'aubo':"
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm "$RUST_LIB" 2>/dev/null | grep -i aubo || echo "No aubo symbols found"
            exit 1
          fi
        else
          echo "✗ Rust library not found: $RUST_LIB"
          exit 1
        fi
        
        echo "=== Validating C++ ZygiskNext module ==="
        CPP_MODULE="target/aarch64-linux-android/aubo_module.so"
        if [ -f "$CPP_MODULE" ]; then
          echo "✓ C++ module found: $CPP_MODULE"
          echo "Size: $(stat -c%s "$CPP_MODULE") bytes"
          
          # Show all available symbols for debugging
          echo "Available symbols in C++ module:"
          $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm "$CPP_MODULE" 2>/dev/null | head -20 || echo "No symbols found or nm failed"
          
          # Check for required ZygiskNext exports
          if $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm "$CPP_MODULE" | grep -q "zn_module"; then
            echo "✓ zn_module symbol found"
          else
            echo "✗ zn_module symbol missing"
            echo "Available symbols containing 'zn':"
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm "$CPP_MODULE" 2>/dev/null | grep -i zn || echo "No zn symbols found"
            exit 1
          fi
          
          if $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm "$CPP_MODULE" | grep -q "zn_companion_module"; then
            echo "✓ zn_companion_module symbol found"
          else
            echo "✗ zn_companion_module symbol missing"
            echo "Available symbols containing 'companion':"
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm "$CPP_MODULE" 2>/dev/null | grep -i companion || echo "No companion symbols found"
            exit 1
          fi
        else
          echo "✗ C++ module not found: $CPP_MODULE"
          exit 1
        fi
        
        echo "=== All modules validated successfully ==="
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aubo-rs-modules-${{ matrix.build-type }}
        path: |
          target/aarch64-linux-android/${{ matrix.build-type }}/libaubo_rs.so
          target/aarch64-linux-android/aubo_module.so

  package:
    name: Package Magisk Module
    runs-on: ubuntu-latest
    needs: build-android
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts (release)
      id: download-release
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: aubo-rs-modules-release
        path: artifacts/
    
    - name: Download build artifacts (debug fallback)
      id: download-debug
      if: steps.download-release.outcome == 'failure'
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: aubo-rs-modules-debug
        path: artifacts/
    
    - name: Debug artifact contents
      run: |
        echo "=== Debugging artifact download ==="
        echo "Release download outcome: ${{ steps.download-release.outcome }}"
        echo "Debug download outcome: ${{ steps.download-debug.outcome }}"
        
        echo "Checking artifacts directory:"
        ls -la artifacts/ || echo "No artifacts directory found"
        
        echo "Complete artifacts directory tree:"
        find artifacts/ -type f 2>/dev/null | head -20 || echo "No files found in artifacts/"
        
        echo "Checking current directory:"
        ls -la . || echo "Cannot list current directory"
        
        echo "Looking for .so files:"
        find . -name "*.so" -type f 2>/dev/null || echo "No .so files found"
        
        echo "Checking if files exist:"
        [ -f "artifacts/libaubo_rs.so" ] && echo "✓ libaubo_rs.so found" || echo "✗ libaubo_rs.so missing"
        [ -f "artifacts/aubo_module.so" ] && echo "✓ aubo_module.so found" || echo "✗ aubo_module.so missing"
        [ -f "artifacts/release/libaubo_rs.so" ] && echo "✓ release/libaubo_rs.so found" || echo "✗ release/libaubo_rs.so missing"
        [ -f "artifacts/debug/libaubo_rs.so" ] && echo "✓ debug/libaubo_rs.so found" || echo "✗ debug/libaubo_rs.so missing"
        
        # If both download attempts failed, exit
        if [ "${{ steps.download-release.outcome }}" = "failure" ] && [ "${{ steps.download-debug.outcome }}" = "failure" ]; then
          echo "✗ Failed to download any artifacts"
          exit 1
        fi
    
    - name: Generate version info
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "code=$(git rev-list --count HEAD)" >> $GITHUB_OUTPUT
        echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    
    - name: Prepare module structure
      run: |
        mkdir -p build/module/lib/arm64
        
        # Try to copy from different possible locations
        RUST_LIB_FOUND=false
        CPP_MODULE_FOUND=false
        
        # Check for Rust library in various locations
        for path in "artifacts/libaubo_rs.so" "artifacts/release/libaubo_rs.so" "artifacts/debug/libaubo_rs.so" "artifacts/target/aarch64-linux-android/release/libaubo_rs.so" "artifacts/target/aarch64-linux-android/debug/libaubo_rs.so" "target/aarch64-linux-android/release/libaubo_rs.so"; do
          if [ -f "$path" ]; then
            echo "✓ Found Rust library at: $path"
            cp "$path" build/module/lib/arm64/libaubo_rs.so
            RUST_LIB_FOUND=true
            break
          fi
        done
        
        # Check for C++ module in various locations
        for path in "artifacts/aubo_module.so" "artifacts/target/aarch64-linux-android/aubo_module.so" "target/aarch64-linux-android/aubo_module.so"; do
          if [ -f "$path" ]; then
            echo "✓ Found C++ module at: $path"
            cp "$path" build/module/lib/arm64/aubo_module.so
            CPP_MODULE_FOUND=true
            break
          fi
        done
        
        # Verify both libraries were found
        if [ "$RUST_LIB_FOUND" = false ]; then
          echo "✗ Rust library not found in any expected location"
          echo "Available files in artifacts/:"
          find artifacts/ -type f 2>/dev/null || echo "No files in artifacts/"
          exit 1
        fi
        
        if [ "$CPP_MODULE_FOUND" = false ]; then
          echo "✗ C++ module not found in any expected location"
          echo "Available files in artifacts/:"
          find artifacts/ -type f 2>/dev/null || echo "No files in artifacts/"
          exit 1
        fi
        
        # Copy template files with error checking
        if [ ! -d "template" ]; then
          echo "✗ Template directory not found"
          exit 1
        fi
        
        echo "Copying template files..."
        cp -r template/* build/module/
        
        if [ ! -f "aubo-rs.toml" ]; then
          echo "✗ aubo-rs.toml configuration file not found"
          exit 1
        fi
        cp aubo-rs.toml build/module/
        
        if [ ! -f "README.md" ]; then
          echo "⚠ README.md not found, creating placeholder"
          echo "# aubo-rs - System-wide Android Ad Blocker" > build/module/README.md
        else
          cp README.md build/module/
        fi
        
        # Verify both libraries are present
        ls -la build/module/lib/arm64/
        echo "Rust library size: $(stat -c%s build/module/lib/arm64/libaubo_rs.so) bytes"
        echo "C++ module size: $(stat -c%s build/module/lib/arm64/aubo_module.so) bytes"
    
    - name: Process templates
      run: |
        sed -i "s/\${moduleId}/aubo_rs/g" build/module/module.prop
        sed -i "s/\${moduleName}/aubo-rs/g" build/module/module.prop
        sed -i "s/\${versionName}/${{ steps.version.outputs.version }} (${{ steps.version.outputs.code }}-${{ steps.version.outputs.hash }})/g" build/module/module.prop
        sed -i "s/\${versionCode}/${{ steps.version.outputs.code }}/g" build/module/module.prop
        
        sed -i "s/@DEBUG@/false/g" build/module/customize.sh
        sed -i "s/@SONAME@/aubo_rs/g" build/module/customize.sh
        sed -i "s/@VERSION@/${{ steps.version.outputs.version }} (${{ steps.version.outputs.code }}-${{ steps.version.outputs.hash }})/g" build/module/customize.sh
        sed -i "s/@SUPPORTED_ABIS@/arm64/g" build/module/customize.sh
        sed -i "s/@MIN_SDK@/${{ env.ANDROID_API_LEVEL }}/g" build/module/customize.sh
    
    - name: Create module ZIP
      run: |
        cd build/module
        zip -r "../../aubo-rs-${{ steps.version.outputs.version }}.zip" . -x "*.git*"
        cd ../..
        
        # Generate checksums
        sha256sum "aubo-rs-${{ steps.version.outputs.version }}.zip" > "aubo-rs-${{ steps.version.outputs.version }}.zip.sha256"
        md5sum "aubo-rs-${{ steps.version.outputs.version }}.zip" > "aubo-rs-${{ steps.version.outputs.version }}.zip.md5"
    
    - name: Validate final module package
      run: |
        echo "=== Validating final Magisk module package ==="
        MODULE_ZIP="aubo-rs-${{ steps.version.outputs.version }}.zip"
        
        # Check ZIP contents
        echo "Module ZIP contents:"
        unzip -l "$MODULE_ZIP"
        
        # Extract and verify libraries
        unzip -j "$MODULE_ZIP" "lib/arm64/*" -d temp_extract/
        
        if [ -f "temp_extract/libaubo_rs.so" ]; then
          echo "✓ Rust library found in ZIP ($(stat -c%s temp_extract/libaubo_rs.so) bytes)"
        else
          echo "✗ Rust library missing from ZIP"
          exit 1
        fi
        
        if [ -f "temp_extract/aubo_module.so" ]; then
          echo "✓ C++ ZygiskNext module found in ZIP ($(stat -c%s temp_extract/aubo_module.so) bytes)"
        else
          echo "✗ C++ ZygiskNext module missing from ZIP"
          exit 1
        fi
        
        # Verify zn_modules.txt
        if unzip -p "$MODULE_ZIP" "zn_modules.txt" | grep -q "aubo_module"; then
          echo "✓ zn_modules.txt correctly configured"
        else
          echo "✗ zn_modules.txt configuration issue"
          exit 1
        fi
        
        rm -rf temp_extract/
        echo "=== Module package validation successful ==="
        
        # Show final module information
        echo "=== Final Module Information ==="
        echo "Module ZIP: $MODULE_ZIP"
        echo "ZIP size: $(stat -c%s "$MODULE_ZIP") bytes"
        echo "SHA256: $(cat "aubo-rs-${{ steps.version.outputs.version }}.zip.sha256")"
        echo "Contents summary:"
        echo "  ✓ Rust library (libaubo_rs.so) - Core filtering engine"
        echo "  ✓ C++ module (aubo_module.so) - ZygiskNext integration"
        echo "  ✓ Configuration files and scripts"
        echo "  ✓ Installation and diagnostic tools"
        echo "Ready for deployment!"
    
    - name: Upload module artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aubo-rs-module
        path: |
          aubo-rs-*.zip
          aubo-rs-*.zip.sha256
          aubo-rs-*.zip.md5
    
    - name: Upload to release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          aubo-rs-*.zip
          aubo-rs-*.zip.sha256
          aubo-rs-*.zip.md5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Generate docs
      run: cargo doc --no-deps
    
    - name: Upload documentation
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: target/doc/
